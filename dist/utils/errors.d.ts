export declare function DeclarationExistError(selector?: string): SyntaxError;
export declare function ElementTypeError(element?: any, type?: string): TypeError;
export declare function ModuleDuplicatedError(selector?: string): SyntaxError;
export declare function ElementDuplicatedError(selector?: string): SyntaxError;
export declare function ModuleConfigMissedError(): ReferenceError;
export declare function DirectiveConfigMissedError(): ReferenceError;
export declare function UnisolateScopeBindingError(): SyntaxError;
export declare function OldModuleActionsError(): SyntaxError;
export declare function RouterRootDuplicatedError(): SyntaxError;
export declare function RoutersConfigUndefinedError(): SyntaxError;
export declare function RoutersDefaultHomeUndefinedError(): SyntaxError;
export declare function SubRoutesNoPathError(): SyntaxError;
export declare function OtherwiseRoutesDefineError(): SyntaxError;
export declare function InjectionKeyDepulicateError(key?: string): Error;
export declare const errors: {
    DeclarationExist: typeof DeclarationExistError;
    ElementType: typeof ElementTypeError;
    ModuleDuplicated: typeof ModuleDuplicatedError;
    ElementDuplicated: typeof ElementDuplicatedError;
    ModuleConfigMissing: typeof ModuleConfigMissedError;
    DirectiveConfigMissed: typeof DirectiveConfigMissedError;
    UnisolateScopeBinding: typeof UnisolateScopeBindingError;
    OldModuleActions: typeof OldModuleActionsError;
    RouterRootDuplicated: typeof RouterRootDuplicatedError;
    RoutersConfigUndefined: typeof RoutersConfigUndefinedError;
    RoutersDefaultHomeUndefined: typeof RoutersDefaultHomeUndefinedError;
    SubRoutesNoPath: typeof SubRoutesNoPathError;
    OtherwiseRoutesDefine: typeof OtherwiseRoutesDefineError;
    InjectionKeyDepulicate: typeof InjectionKeyDepulicateError;
};
